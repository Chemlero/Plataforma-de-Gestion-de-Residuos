package com.mycompany.gestionresiduos;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

public class CRUDSSQL {
    public boolean InsertarContenedor(String IDContenedor, String Ubicacion, String Estado,
                                  double Capacidadtotal, double Capacidadactual, 
                                  Date Fechaultimarecoleccion, String Tiporesiduos) {
        boolean resultado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarContenedor(?, ?, ?, ?, ?, ?, ?)}");

            usp.setString(1, IDContenedor);
            usp.setString(2, Ubicacion);
            usp.setString(3, Estado);
            usp.setDouble(4, Capacidadtotal);
            usp.setDouble(5, Capacidadactual);
            usp.setDate(6, Fechaultimarecoleccion);
            usp.setString(7, Tiporesiduos);

            int filasAfectadas = usp.executeUpdate(); // Devuelve el número de filas insertadas
            resultado = filasAfectadas > 0; // Si al menos una fila fue insertada, retorna true

        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return resultado;
    }
    public ResultSet ObtenerContenedores() {
    ResultSet rs = null;
    CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerContenedores()}");
            rs = usp.executeQuery(); // Ejecutar el procedimiento almacenado
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarContenedor(String IDContenedor, String Estado, double CapacidadActual) 
    {
        boolean actualizado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarContenedor(?, ?, ?)}");

            usp.setString(1, IDContenedor);
            usp.setString(2, Estado);
            usp.setDouble(3, CapacidadActual);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            actualizado = (filasAfectadas > 0); // Si se actualizaron filas, devuelve true

        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return actualizado;
    }
    public boolean EliminarContenedor(String IDContenedor) 
    {
        boolean eliminado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarContenedor(?)}");

            usp.setString(1, IDContenedor);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            eliminado = (filasAfectadas > 0); // Verificar si se eliminó al menos un registro

        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return eliminado;
    }
    public boolean InsertarZona(String NombreZona, int CantidadContenedores, 
                            String NivelAcumulacionBasura, String FrecuenciaRecoleccion, 
                            String TipoProblema, Date FechaUltimaActualizacion) {
        boolean resultado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarZona(?, ?, ?, ?, ?, ?)}");

            usp.setString(1, NombreZona);
            usp.setInt(2, CantidadContenedores);
            usp.setString(3, NivelAcumulacionBasura);
            usp.setString(4, FrecuenciaRecoleccion);
            usp.setString(5, TipoProblema);
            usp.setDate(6, FechaUltimaActualizacion);

            int filasAfectadas = usp.executeUpdate(); // Devuelve el número de filas insertadas
            resultado = filasAfectadas > 0; // Si al menos una fila fue insertada, retorna true

        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return resultado;
    }
    public ResultSet ObtenerZonas() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerZonas()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento almacenado y obtener resultados

        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarZona(int CodigoPostal, String FrecuenciaRecoleccion, String NivelAcumulacionBasura) {
        boolean actualizado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarZona(?, ?, ?)}");

            usp.setInt(1, CodigoPostal);
            usp.setString(2, FrecuenciaRecoleccion);
            usp.setString(3, NivelAcumulacionBasura);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado

            if (filasAfectadas > 0) {
                actualizado = true; // Si se actualizaron filas, retornar true
            }
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return actualizado;
    }
    public boolean EliminarZona(int CodigoPostal) {
        boolean eliminado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarZona(?)}");

            usp.setInt(1, CodigoPostal);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado

            if (filasAfectadas > 0) {
                eliminado = true; // Si se eliminó al menos una fila, retornar true
            }
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return eliminado;
    }
    public boolean InsertarAutoridad(String Nombre, String Institucion, String Correo, 
                                     String Telefono, int ReportesRecibidos, String AccionesTomadas) {
        boolean insertado = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarAutoridad(?, ?, ?, ?, ?, ?)}");

            usp.setString(1, Nombre);
            usp.setString(2, Institucion);
            usp.setString(3, Correo);
            usp.setString(4, Telefono);
            usp.setInt(5, ReportesRecibidos);
            usp.setString(6, AccionesTomadas);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado

            if (filasAfectadas > 0) {
                insertado = true; // Si se insertó al menos una fila, retornar true
            }
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return insertado;
    }
    public ResultSet ObtenerAutoridades() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerAutoridades()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento almacenado y obtener resultados
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarAutoridad(int ID_Autoridad, int Reportes_Recibidos, String Acciones_Tomadas) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarAutoridad(?, ?, ?)}");

            usp.setInt(1, ID_Autoridad);
            usp.setInt(2, Reportes_Recibidos);
            usp.setString(3, Acciones_Tomadas);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            exito = filasAfectadas > 0; // Si al menos una fila fue afectada, la actualización fue exitosa
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public boolean EliminarAutoridad(int ID_Autoridad) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarAutoridad(?)}");

            usp.setInt(1, ID_Autoridad);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            exito = filasAfectadas > 0; // Si al menos una fila fue afectada, la eliminación fue exitosa
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public boolean InsertarRecolectorContenedor(int ID_Recolector, String ID_Contenedor) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarRecolectorContenedor(?, ?)}");

            usp.setInt(1, ID_Recolector);
            usp.setString(2, ID_Contenedor);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            exito = filasAfectadas > 0; // Si al menos una fila fue afectada, la inserción fue exitosa
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public ResultSet ObtenerRecolectorContenedor() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerRecolectorContenedor()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento almacenado
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarRecolectorContenedor(int ID_Recolector, String ID_Contenedor) {
        CallableStatement usp = null;
        boolean resultado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarRecolectorContenedor(?, ?)}");

            usp.setInt(1, ID_Recolector);
            usp.setString(2, ID_Contenedor);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            resultado = (filasAfectadas > 0); // Verifica si se actualizó al menos una fila
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return resultado;
    }
    public boolean EliminarRecolectorContenedor(int ID_Recolector, String ID_Contenedor) {
        CallableStatement usp = null;
        boolean resultado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarRecolectorContenedor(?, ?)}");

            usp.setInt(1, ID_Recolector);
            usp.setString(2, ID_Contenedor);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            resultado = (filasAfectadas > 0); // Verifica si se eliminó al menos una fila
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return resultado;
    }
    public boolean InsertarAutoridadReporte(int ID_Autoridad, int ID_Reporte) {
        CallableStatement usp = null;
        boolean resultado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarAutoridadReporte(?, ?)}");

            usp.setInt(1, ID_Autoridad);
            usp.setInt(2, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            resultado = (filasAfectadas > 0); // Verifica si se insertó al menos una fila
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return resultado;
    }
    public ResultSet ObtenerAutoridadReporte() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerAutoridadReporte()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento almacenado
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarAutoridadReporte(int ID_Autoridad, int ID_Reporte) {
        CallableStatement usp = null;
        boolean actualizado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarAutoridadReporte(?, ?)}");

            usp.setInt(1, ID_Autoridad);
            usp.setInt(2, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            actualizado = (filasAfectadas > 0);
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return actualizado;
    }
    public boolean EliminarAutoridadReporte(int ID_Autoridad, int ID_Reporte) {
        CallableStatement usp = null;
        boolean eliminado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarAutoridadReporte(?, ?)}");

            usp.setInt(1, ID_Autoridad);
            usp.setInt(2, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            eliminado = (filasAfectadas > 0);
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return eliminado;
    }
    public boolean InsertarCiudadanoReporte(int Dni, int ID_Reporte) {
        CallableStatement usp = null;
        boolean insertado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarCiudadanoReporte(?, ?)}");

            usp.setInt(1, Dni);
            usp.setInt(2, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento almacenado
            insertado = (filasAfectadas > 0);
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return insertado;
    }
    public ResultSet ObtenerCiudadanoReporte() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerCiudadanoReporte()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento almacenado
        } catch (SQLException Error) {
            System.out.println("Error en instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarCiudadanoReporte(int Dni, int ID_Reporte) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarCiudadanoReporte(?, ?)}");

            usp.setInt(1, Dni);
            usp.setInt(2, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            exito = (filasAfectadas > 0); // Si se actualizó al menos una fila, es exitoso

        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public boolean EliminarCiudadanoReporte(int Dni, int ID_Reporte) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarCiudadanoReporte(?, ?)}");

            usp.setInt(1, Dni);
            usp.setInt(2, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            exito = (filasAfectadas > 0); // Si al menos una fila fue eliminada, éxito

        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public boolean InsertarReporte(Date FechaGeneracion, int CodigoPostal, double CantidadResiduos, 
                                   int CantidadContenedoresLlenos, String IncidenciasReportadas, 
                                   String EstadoEnvio) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarReporte(?, ?, ?, ?, ?, ?)}");

            usp.setDate(1, new java.sql.Date(FechaGeneracion.getTime()));
            usp.setInt(2, CodigoPostal);
            usp.setDouble(3, CantidadResiduos);
            usp.setInt(4, CantidadContenedoresLlenos);
            usp.setString(5, IncidenciasReportadas);
            usp.setString(6, EstadoEnvio);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            exito = (filasAfectadas > 0); // Si al menos una fila fue insertada, éxito

        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public ResultSet ObtenerReporte() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerReporte()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento y obtener los datos
        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarReporte(int ID_Reporte, String Estado_Envio) {
        CallableStatement usp = null;
        boolean actualizado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarReporte(?, ?)}");

            usp.setInt(1, ID_Reporte);
            usp.setString(2, Estado_Envio);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            actualizado = filasAfectadas > 0; // Verificar si se actualizaron registros
        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return actualizado;
    }
    public boolean EliminarReporte(int ID_Reporte) {
        CallableStatement usp = null;
        boolean eliminado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarReporte(?)}");

            usp.setInt(1, ID_Reporte);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            eliminado = filasAfectadas > 0; // Si se eliminó, devuelve true
        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return eliminado;
    }
    public boolean InsertarVehiculoRecoleccion(String Placa, String TipoVehiculo, double CapacidadCarga, 
                                               int CodigoPostal, Date UltimoMantenimiento, String Estado) {
        CallableStatement usp = null;
        boolean insertado = false;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarVehiculoRecoleccion(?, ?, ?, ?, ?, ?)}");

            usp.setString(1, Placa);
            usp.setString(2, TipoVehiculo);
            usp.setDouble(3, CapacidadCarga);
            usp.setInt(4, CodigoPostal);
            usp.setDate(5, UltimoMantenimiento);
            usp.setString(6, Estado);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar el procedimiento
            insertado = filasAfectadas > 0; // Si se insertó, devuelve true
        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return insertado;
    }
    public ResultSet ObtenerVehiculoRecoleccion() {
        ResultSet rs = null;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ObtenerVehiculoRecoleccion()}");

            rs = usp.executeQuery(); // Ejecutar el procedimiento y obtener los datos
        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return rs;
    }
    public boolean ActualizarVehiculoRecoleccion(String placa, String estado) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call ActualizarVehiculoRecoleccion(?, ?)}");

            usp.setString(1, placa);
            usp.setString(2, estado);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar actualización
            exito = (filasAfectadas > 0); // Verifica si se actualizó al menos una fila

        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public boolean EliminarVehiculoRecoleccion(String placa) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call EliminarVehiculoRecoleccion(?)}");

            usp.setString(1, placa);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar eliminación
            exito = (filasAfectadas > 0); // Verifica si se eliminó al menos una fila

        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public boolean InsertarCiudadano(int dni, String nombre, String apPaterno, String apMaterno, 
                                     String email, String telefono, int codigoPostal, int cantidadReportes) {
        boolean exito = false;
        CallableStatement usp = null;

        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            usp = conn.prepareCall("{call InsertarCiudadano(?, ?, ?, ?, ?, ?, ?, ?)}");

            usp.setInt(1, dni);
            usp.setString(2, nombre);
            usp.setString(3, apPaterno);
            usp.setString(4, apMaterno);
            usp.setString(5, email);
            usp.setString(6, telefono);
            usp.setInt(7, codigoPostal);
            usp.setInt(8, cantidadReportes);

            int filasAfectadas = usp.executeUpdate(); // Ejecutar inserción
            exito = (filasAfectadas > 0); // Verifica si se insertó correctamente

        } catch (SQLException Error) {
            System.out.println("Error en la instrucción SQL: " + Error.getMessage());
        }
        return exito;
    }
    public ResultSet ObtenerCiudadanos() {
        ResultSet resultado = null;
        try {
            Connection conn = ConexionSQLServer.getInstancia().getConexion();
            CallableStatement usp = conn.prepareCall("{call ObtenerCiudadano()}");
            resultado = usp.executeQuery(); // Ejecutar consulta
        } catch (SQLException Error) {
            System.out.println("Error al obtener ciudadanos: " + Error.getMessage());
        }
        return resultado;
    }
    public boolean actualizarCiudadano(int dni, int cantidadReportesEnviados) {
        boolean actualizado = false;
        Connection conn = null;
        CallableStatement usp = null;

        try {
            // Obtener la conexión desde el Singleton
            conn = ConexionSQLServer.getInstancia().getConexion();

            // Llamar al procedimiento almacenado
            usp = conn.prepareCall("{call ActualizarCiudadano(?, ?)}");
            usp.setInt(1, dni);
            usp.setInt(2, cantidadReportesEnviados);

            // Ejecutar el procedimiento
            int filasAfectadas = usp.executeUpdate();
            actualizado = filasAfectadas > 0;

        } catch (SQLException e) {
            System.out.println("Error al actualizar ciudadano: " + e.getMessage());
        } finally {
            try {
                if (usp != null) usp.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error al cerrar recursos: " + ex.getMessage());
            }
        }
        return actualizado;
    }
    public boolean eliminarCiudadano(int dni) {
        boolean eliminado = false;
        Connection conn = null;
        CallableStatement usp = null;

        try {
            // Obtener la conexión desde el Singleton
            conn = ConexionSQLServer.getInstancia().getConexion();

            // Llamar al procedimiento almacenado
            usp = conn.prepareCall("{call EliminarCiudadano(?)}");
            usp.setInt(1, dni);

            // Ejecutar el procedimiento
            int filasAfectadas = usp.executeUpdate();
            eliminado = filasAfectadas > 0;

        } catch (SQLException e) {
            System.out.println("Error al eliminar ciudadano: " + e.getMessage());
        } finally {
            try {
                if (usp != null) usp.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error al cerrar recursos: " + ex.getMessage());
            }
        }
        return eliminado;
    }
    public boolean insertarRecolector(String nombre, int codigoPostal, String turno, double cantidadRecolectada, 
                                      String vehiculoAsignado, Timestamp fechaUltimaActividad) {
        boolean insertado = false;
        Connection conn = null;
        CallableStatement usp = null;

        try {
            // Obtener la conexión desde el Singleton
            conn = ConexionSQLServer.getInstancia().getConexion();

            // Preparar la llamada al procedimiento almacenado
            usp = conn.prepareCall("{call InsertarRecolector(?, ?, ?, ?, ?, ?)}");
            usp.setString(1, nombre);
            usp.setInt(2, codigoPostal);
            usp.setString(3, turno);
            usp.setDouble(4, cantidadRecolectada);
            usp.setString(5, vehiculoAsignado);
            usp.setTimestamp(6, fechaUltimaActividad);

            // Ejecutar la inserción
            int filasAfectadas = usp.executeUpdate();
            insertado = filasAfectadas > 0;

        } catch (SQLException e) {
            System.out.println("Error al insertar recolector: " + e.getMessage());
        } finally {
            try {
                if (usp != null) usp.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error al cerrar recursos: " + ex.getMessage());
            }
        }
        return insertado;
    }
    public ResultSet obtenerRecolectores() {
        ResultSet rs = null;
        Connection conn = null;
        CallableStatement usp = null;

        try {
            // Obtener la conexión desde el Singleton
            conn = ConexionSQLServer.getInstancia().getConexion();

            // Preparar la llamada al procedimiento almacenado
            usp = conn.prepareCall("{call ObtenerRecolector()}");

            // Ejecutar la consulta y obtener el ResultSet
            rs = usp.executeQuery();

        } catch (SQLException e) {
            System.out.println("Error al obtener recolectores: " + e.getMessage());
        }

        return rs; // Retornamos el ResultSet directamente
    }
    public boolean actualizarRecolector(int idRecolector, double cantidadRecolectada, Timestamp fechaUltimaActividad) {
        boolean actualizado = false;
        Connection conn = null;
        CallableStatement usp = null;

        try {
            // Obtener la conexión desde el Singleton
            conn = ConexionSQLServer.getInstancia().getConexion();

            // Preparar la llamada al procedimiento almacenado
            usp = conn.prepareCall("{call ActualizarRecolector(?, ?, ?)}");

            // Asignar valores a los parámetros del procedimiento almacenado
            usp.setInt(1, idRecolector);
            usp.setDouble(2, cantidadRecolectada);
            usp.setTimestamp(3, fechaUltimaActividad);

            // Ejecutar la consulta
            int filasAfectadas = usp.executeUpdate();
            actualizado = filasAfectadas > 0;

        } catch (SQLException e) {
            System.out.println("Error al actualizar recolector: " + e.getMessage());
        } finally {
            try {
                if (usp != null) usp.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error al cerrar conexión: " + ex.getMessage());
            }
        }

        return actualizado;
    }
    public boolean eliminarRecolector(int idRecolector) {
        boolean eliminado = false;
        Connection conn = null;
        CallableStatement usp = null;

        try {
            // Obtener la conexión desde el Singleton
            conn = ConexionSQLServer.getInstancia().getConexion();

            // Preparar la llamada al procedimiento almacenado
            usp = conn.prepareCall("{call EliminarRecolector(?)}");

            // Asignar el parámetro del procedimiento almacenado
            usp.setInt(1, idRecolector);

            // Ejecutar la consulta
            int filasAfectadas = usp.executeUpdate();
            eliminado = filasAfectadas > 0;

        } catch (SQLException e) {
            System.out.println("Error al eliminar recolector: " + e.getMessage());
        } finally {
            try {
                if (usp != null) usp.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                System.out.println("Error al cerrar conexión: " + ex.getMessage());
            }
        }
        return eliminado;
    }
}
